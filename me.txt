                            Setting Up Your Development Environment
Release Timeline
    J2EE 1.2    J2EE 1.3    J2EE 1.4    Java EE 5   Java EE 6   Java EE 7   Java EE 8
    1999        2001           2003     2006        2009        2013        2016/2017

    Spring 1.0      Spring 2.0     Spring 3.0       Spring 4.0      Spring 4.3 
        2004            2006           2009             2013          Mar 2016

Dev Environment Overview
    Must Have Java Development Kit (JDK)
        We must Have the Java Development Kit (JDK) Installed
        Spring 5 requires Java 8 or higher
    Software
        Java Application Server For Spring MVC web development. We use Tomcat server
        Java Integrated Development Environment (IDE). Use eclipse

Installing Tomcat on MS Windows
    Tomcat Version:
        New version of Tomcat 10 was released to support Jakarta EE 9(around February, 2021)
        In this release they renamed the packages, javax.* to jakarta.*
        This is a breaking change for java EE apps
        Spring 5 currently does not support the new package renaming Jakarta EE9. As a result, Spring 5 does not currently
            work on Tomcat 10
        We will use Tomcat 9 for our Spring 5 apps
    https://tomcat.apache.org/ -> https://tomcat.apache.org/download-90.cgi
        32-bit/64-bit Windows Service Installer (pgp, sha512)
    When install -> Select the type of install: Full
    Username: admin 
    Password: admin
    Turn of option "Show Readme"
    Verify the Installation: http://localhost:8080/
    services.msc -> service(local) -> Apache Tomcat 9.0 Tomcat9 -> Start or Stop
    Stop it and we will start it via Eclipse later
Installing Eclipse on MS Windows
    https://www.eclipse.org/downloads/packages/
    Eclipse IDE for Enterprise Java and Web Developers(java EE Developers)
    eclipse-jee-2021-03-R-win32-x86_64.zip -> unzip and copy eclipse folder to C Driver
Connecting Eclipse to Tomcat
    Benefits:
        Start Tomcat from Eclipse
        Easily deploy Application directly to Tomcat
    Workspace
        C:\Users\vudinhquang\eclipse-workspace
    Open Eclipse and at the bottom section there is a tab called servers and click on it. We do not have any servers
        associated with our Eclipse Environment at the time. So we need to do is click on link and add new server that poits 
        to our Tomcat that we installed
    Apache 
        open folder and scroll to select Tomcat 9
        Tomcat installation directly: Tell Eclipse where Tomcat is installed
            C:\Program Files\Apache Software Foundation\Tomcat 9.0
Downloading Spring 5 JAR Files - Overview
    To Do List
        Create Eclipse Project
        Download Spring JAR Files
        Add JAR files to Eclipse Project … Build Path
    What about Maven 
        Instead of manually downloading we can use a tool like Maven
Downloading Spring 5 JAR files - Installation
    Windows -> Perspective -> Java
    Create Project
        File -> New -> Java Project
        Project name: spring-demo-one
    luv2code.com/downloadspring
    https://repo.spring.io/release/org/springframework/spring/
        spring-5.3.5-dist.zip 
    Create folder "lib" in "spring-demo-one" Project
    Copy all of the JAR files in libs folder that downloaded into "lib" created folder
    Add that jar files to class path
    Right click "spring-demo-one" -> Properties -> Java Build Path -> Libraries -> Classpath -> Add JARs -> Select all 
        jar files in "lib" folder of "spring-demo-one" project 
    After that we can see  having new "Referenced Libraries" in "spring-demo-one" project

    ==================================================================================================================

                            Spring Inversion of Control - XML Configuration

Code Demo - Rough Prototype
    Create a new package
        spring-demo-one -> New -> Package -> Name: com.luv2code.springdemo
    Create a new interface
        com.luv2code.springdemo -> New -> Interface -> Name: Coach
    Create a new class: BaseballCoach
        com.luv2code.springdemo -> New -> Class -> Name: BaseballCoach
    Create a new class: MyApp
        com.luv2code.springdemo -> New -> Class
            Name: MyApp
            check the box: public static void main(String[] args)
    Run MyApp.java/Right click -> Run as -> Java Application
Spring Inversion of Control - Overview
    Spring Container's Primary functions
        Create and manage objects (Inversion of Control)
        Inject object’s dependencies (Dependency Injection)
    Configuring Spring Container
        XML configuration file (legacy, but most legacy apps still use this)
        Java Annotations (modern)
        Java Source Code (modern)
    Spring Development Process
        1. Configure our Spring Beans
            <beans … >
                <bean id="myCoach"
                class="com.luv2code.springdemo.BaseballCoach">
                </bean>
            </beans>
            BaseballCoach is implementations
        2. Create a Spring Container
            Spring container is generically known as ApplicationContext
            Specialized implementations
                ClassPathXmlApplicationContext
                AnnotationConfigApplicationContext
                GenericWebApplicationContext
        3. Retrieve Beans from Spring Container
            Coach theCoach = context.getBean("myCoach", Coach.class);
            Coach.class is interface
Spring Inversion of Control - Write Some Code - Part 1
Spring Inversion of Control - Write Some Code - Part 2
        TrackCoach -> BaseballCoach
    class="com.luv2code.springdemo.BaseballCoach">

    ==================================================================================================================

                            Spring Dependency Injection - XML Configuration

Spring Dependency Injection - Overview
    "Dependency" same thing as helper objects
    We will cover the two most common
        Constructor Injection
        Setter Injection
    Development Process - Constructor Injection
        1. Define the dependency interface and class
        2. Create a constructor in our class for injections
        3. Configure the dependency injection in Spring config file
        interface Car {
            public function run();
        }

        class Mercedes implements Car {
            public function run() {
                echo 'Mercedes';
            }
        }

        class BMV implements Car {
            public function run() {
                echo 'BMV!';
            }
        }

        class Driver {
            private $car;
            public function __construct(Car $car) {
                $this->car = $car;
            }
            public function drive() {
                $this->car->run();
            }
        }
Spring Dependency Injection - Behind the Scenes
    How Spring Processes your Config File
        <bean id="myFortuneService"
            class="com.luv2code.springdemo.HappyFortuneService">
        </bean>
        <bean id="myCoach"
            class="com.luv2code.springdemo.BaseballCoach">
            <constructor-arg ref="myFortuneService" />
        </bean>
    Spring Framework
        HappyFortuneService myFortuneService =
            new HappyFortuneService();
        BaseballCoach myCoach =
            new BaseballCoach(myFortuneService);
Spring Dependency Injection - Write Some Code - Part 1
    Define the dependency interface and class: Create interface FortuneService
Spring Dependency Injection - Write Some Code - Part 2
    Create a constructor in our class for injections
    Configure the dependency injection in Spring config file
Spring Dependency Injection - Write Some Code - Part 3
    Run as Java Application: HelloSpringApp.java
Setter Injection - Overview
    Inject dependencies by calling setter method(s) on our class
    Development Process - Setter Injection
        1. Create setter method(s) in our class for injections
        2. Configure the dependency injection in Spring config file
    How Spring Processes your Config File
        <bean id="myFortuneService"
            class="com.luv2code.springdemo.HappyFortuneService">
        </bean>
        Spring Framework:
            HappyFortuneService myFortuneService =
                new HappyFortuneService();
        <bean id="myCricketCoach"
            class="com.luv2code.springdemo.CricketCoach">
            <property name="fortuneService" ref="myFortuneService" />
        </bean>
        Spring Framework:
            CricketCoach myCricketCoach =
                new CricketCoach();
            myCricketCoach.setFortuneService(myFortuneService);
Setter Injection - Write Some Code - Part 1
Setter Injection - Write Some Code - Part 2
    Create SetterDemoApp class with public static void main
Injecting Literal Values - Overview
    Development Process
        1. Create setter method(s) in our class for injections
        2. Configure the injection in Spring config file
Injecting Literal Values - Write Some Code
Injecting Values from a Properties File - Overview
    Development Process
        1. Create Properties File
        2. Load Properties File in Spring config file
        3. Reference values from Properties File
Injecting Values from a Properties File - Write Some Code

    ==================================================================================================================

                            Spring Bean Scopes and Lifecycle
            
Bean Scopes - Overview
    What Is a Singleton
        Spring Container creates only one instance of the bean, by default
        It is cached in memory
        All requests for the bean will return a SHARED reference to the SAME bean
    Additional Spring Bean Scopes
        singleton: Create a single shared instance of the bean. Default scope.
        prototype: Creates a new bean instance for each container request.
        request: Scoped to an HTTP web request. Only used for web apps.
        session: Scoped to an HTTP web session. Only used for web apps.
        global-session: Scoped to a global HTTP web session. Only used for web apps.
Bean Scopes - Write Some Code - Part 1
    